# start een mediator in container mode
container = true
# geef de container een herkenbare naam
container-name = mediator2
host=localhost
local-host=127.0.0.1
connection-manager                                      = jade.imtp.leap.JICP.BIFESDispatcher
mediator-class                                          = jade.imtp.leap.nio.NIOBEDispatcher
port=1100
# waar staat de main-container
# geef de poort op waar de JICPServer gaat luisteren, de JICPServer zal altijd gestart worden, ook als je hier geen gebruik van wilt maken
# omdat je bijvoorbeeld de BEManagementService gebruikt
local-port = 1097
# welke JICPPeer gaan we gebruiken om deze container met de main-container te verbinden
icps = jade.imtp.leap.JICP.JICPPeer
# start de op java nio (zeer snelle!) gebaseerde mediator service, de NotificationService hoort er eigenlijk wel bij
services = jade.core.event.NotificationService;jade.imtp.leap.nio.BEManagementService(true)
leap.properties=config/leap.properties
TOKENFILE=config/tokens.txt

#
# if you want replication, neem bij services op: jade.core.replication.AddressNotificationService
#
# welke typen connecties gaan we gebruiken
jade_imtp_leap_nio_BEManagementService_accept = ssl(1101)
jade_imtp_leap_nio_BEManagementService_poolsize = 20
# we willen niet op de oude, java io, gebaseerde manier verbinden
jade_imtp_leap_JICP_JICPServer_acceptmediators = false
# all agents live in the same platform, we don't need fipa mtp transport
nomtp = true
# geef het platform een naam (lijkt zonder invloed)
splitcontainer=true
