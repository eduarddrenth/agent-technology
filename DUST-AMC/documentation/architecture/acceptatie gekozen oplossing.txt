Hi all,

Drenth, Eduard wrote:
>
> Hello all,
>
> Thank you all for participating in this discussion. Let me add some
> more remarks. First a recap.
>
> What do we actually want to end up with? Perhaps this:
>
>     1) the grid, provides cpu power and storage
>     2) a network of intelligent software, provides metrics, problem
> detection, problem analysis and notification.
>
> The agent based pilots we develop for the AMC (and the Nikhef) should
> get us closer to this goal.
>
> The AMC pilot offers the following functionality:
>
>     1) automatic notification in VBrowser about the status of a moteur
> workflow
>     2) automated troubleshooting when a moteur workflow fails
>        - part of this is analysis of log files for particular grid-jobs
>          - these log files are on a workernode
>          - accessible from outside the grid, certificate needed
>          - accessible by an agent deployed on that specific workernode
>
> Reading logfiles from outside the grid using a certificate is a
> solution that meets the functional requirements for the AMC. But it is
> not very 'agent like'. Because of the goal to learn doing things
> 'agent like' I want to somehow let an agent read logfiles 'on the spot'.
>
> How to let an agent read logfiles 'on the spot'?
>
>     - You cannot deploy an agent after a job failed on a specific
> workernode.
>     - You can in several ways deploy an agent together with the actual job
>
> Again, some scenarios:
>
> For all scenarios a successful grid-job leads to "exit 0"
>
>     1) wrap the job-shell in an agent
>        - on failure:
>          - let the agent start a conversation with moteur/vbrowser agents
>            - this conversation may lead to analysis of logfiles
> (stdout, stderr,...)
>          - return System.exit(<exit code of grid-job>);
>   
>     2) wrap the job-shell in an agent
>        - on failure:
>          - let the agent copy logfiles (stdout, stderr,...) to the
> moteur agent
>          - return System.exit(<exit code of grid-job>);
>        
> - In both scenarios we keep an agent alive for a limited period of time.
> - In both scenarios a jvm is started for a job, which leads to
> increased resource usage
>
>     3) wrap the job-shell in another shell
>        - on failure:
>          - start an agent
>          - let the agent start a conversation with moteur/vbrowser agents
>            - this conversation may lead to analysis of logfiles
> (stdout, stderr,...)
>          - return System.exit(<exit code of grid-job>);
>
> - In this scenario an agent is only started in case of an error
>
>
it seems to me that all solutions will/should be based on wrapping the
actual (pay-load) job in something else. This is what most pilot job
frameworks also do, so integrating this with DIANE might be a good thing.
As for launching another job which will land on the same worker node to
look for log files: forget it. the chances that that will work are far
too slim and are far too site dependent.

Personally I like option #3 the best: only launch an agent if something
went wrong: this will reduce the overhead.

cheers,

JJK / Jan Just Keijser
Nikhef
Amsterdam


> Hi all,
>
> Good to see such an interesting discussion !
>
> Some remarks:
> * I think the use of DIANE shouldn't be an assumption for this
> development. Although it greatly improves the execution we all know that
> it has limitations and some applications may not want to use it
> (examples: MPI applications, applications with exotic GLUE requirements,
> applications using ARC, security).
> * I agree with Silvia that agents should be as uninvasive as possible. I
> see them as processes that would constantly dig into log files and raise
> alarms in case strange patterns occur. For instance, the workflow agent
> could complain when jdl have been generated but no job id is here. I
> guess several cases like this could be monitored. A WN agent could,
> e.g., detect exit codes or jobs spending too much time on data
> transfers. This could be done non-invasively.
> * Keeping agents alive when jobs and workflow fail may be quite heavy.
> What about deploying agents on demand, e.g., when a user wants to
> investigate errors of a particular workflow ?
>
> Best regards,
> Tristan
>
>
> On 10/08/2009 04:11 PM, Silvia Delgado Olabarriaga wrote:
> > dear all,
> >
> > it is nice to get back on-line and see such a live discussion!
> >
> > however, if i understand correctly, the current proposal is rather
> > invasive (changing the way that jobs are submitted and all)
> > as far as i can recall, the plan was to stick to MONITORING agents,
> > that is, agents that look into the already produced logs and figure
> > out what is going on similarly or better than how humans (we) do now.
> > it might be that - due to security restrictions - some agents will
> > have to run "on the other side of the fence"  to have access to the
> > right logs - but i would not be in favour of having another layer of
> > middleware to submit and monitor jobs on the grid.
> > At best, if the new agent monitoring methods are successful (but we
> > need demos and evaluations of it first), we can discuss
> > integration/addition/incorporation with the developers of DIANE and
> > MOTEUR. But i find it too soon for going that far.
> >
> > Secondly, the proposed architecture (i think) resembles too much that
> > of DIANE, which is already there but not visible to Eduard yet, since
> > this was a choice we took (=separate implementation from monitoring) .
> > we should not reinvent the wheel, and only re-implement it if we have
> > reasons to do it differently or better.  Are we convinced that this is
> > the case?
> >
> > Thrird, i miss a clear definition of goals. Below a SOLUTION is
> > proposed, but to which PROBLEM?
> > is this related to the warm-up case we defined? i believe not, since
> > there the agent should find out only
> > + if the workflow is running/ completely or "dead",
> > + if it runs/ran with error or ok.
> > no job outputs are needed for that.
> >
> > this agent will communicate with the current moteur webservice
> > (interface to be defined, or perhaps it has been on monday?), which
> > will return the status info to be displayed on a "workflow overview"
> > of the new moteur plugin for the vbrowser.
> >
> > Eduard, are you working in a new use case?
> > could you please add it to the wiki?
> >
> > by the way, i believe something was lost on the wiki this week.
> > i am almost sure to have put a lot of effort to define the warm-up use
> > case, but i cannot find any trace of it anymore on the pages.
> > i'll add it (again).
> >
> > How to proceed?
> > my suggestion is to first complete the current use case, evaluate, get
> > to know things better and then start with the next phase. This can be
> > done in a week or two.
> > we are constantly evolving the system (at this very moment diane is
> > being adopted for real), we should continue with small steps.
> >
> > what do you think?
> >
> > groetjes,
> > S.
> >
> >
> >
> >
> >
> > On Oct 8, 2009, at 2:27 PM, Jan Just Keijser wrote:
> >
> >> Hi Eduard,
> >>
> >> Drenth, Eduard wrote:
> >>> Thanks for your reply, I'll try to clarify my confusing prosa :-), see
> >>> below, and.... I mixed up my 2b and 3b, sorry. So the "2b
> >>> options/solutions" is actually about grid jobs started from a moteur
> >>> workflow.
> >>>
> >>> Personally I favor the scenarios where an agent wraps the actual
> moteur
> >>> instance or grid-job, which ever is applicable.
> >>>
> >>> One thing in particular I would like to know.
> >>>
> >>> When wrapping a grid-job in an agent (so an agent is started on the
> >>> workernode as a job, the agent launches the grid-job shell), is it
> >>> problematic to keep the agent alive for some time (until
> >>> troubleshooting
> >>> by the agents finishes) after the grid-job fails?
> >>>
> >>>
> >> if you submit an agent-job to the grid, which in turn starts
> >> something else then the grid "sees" only the agent-job. The agent-job
> >> will run for as long as your job-slot is, even if the actual
> >> 'grib-job shell' as you call it has terminated. Be aware that the VO
> >> is also "charged" for however long the agent-job will run , even if
> >> the agent is doing nothing at all
> >>
> >> So it is not problematic to keep the agent alive after the payload
> >> job finishes , except for the fact that you're consuming resources
> >> (and eating up allocated fair share) which might be used more
> >> efficiently.
> >>
> >>
>


