dear all,

it is nice to get back on-line and see such a live discussion!

however, if i understand correctly, the current proposal is rather 
invasive (changing the way that jobs are submitted and all)
as far as i can recall, the plan was to stick to MONITORING agents, 
that is, agents that look into the already produced logs and figure 
out what is going on similarly or better than how humans (we) do now.
it might be that - due to security restrictions - some agents will 
have to run "on the other side of the fence"  to have access to the 
right logs - but i would not be in favour of having another layer of 
middleware to submit and monitor jobs on the grid.
At best, if the new agent monitoring methods are successful (but we 
need demos and evaluations of it first), we can discuss integration/
addition/incorporation with the developers of DIANE and MOTEUR. But i 
find it too soon for going that far.

Secondly, the proposed architecture (i think) resembles too much that 
of DIANE, which is already there but not visible to Eduard yet, since 
this was a choice we took (=separate implementation from monitoring) . 
we should not reinvent the wheel, and only re-implement it if we have 
reasons to do it differently or better.  Are we convinced that this is 
the case?

Thrird, i miss a clear definition of goals. Below a SOLUTION is 
proposed, but to which PROBLEM?
is this related to the warm-up case we defined? i believe not, since 
there the agent should find out only
+ if the workflow is running/ completely or "dead",
+ if it runs/ran with error or ok.
no job outputs are needed for that.

this agent will communicate with the current moteur webservice 
(interface to be defined, or perhaps it has been on monday?), which 
will return the status info to be displayed on a "workflow overview" 
of the new moteur plugin for the vbrowser.

Eduard, are you working in a new use case?
could you please add it to the wiki?

by the way, i believe something was lost on the wiki this week.
i am almost sure to have put a lot of effort to define the warm-up use 
case, but i cannot find any trace of it anymore on the pages.
i'll add it (again).

How to proceed?
my suggestion is to first complete the current use case, evaluate, get 
to know things better and then start with the next phase. This can be 
done in a week or two.
we are constantly evolving the system (at this very moment diane is 
being adopted for real), we should continue with small steps.

what do you think?

groetjes,
S.





On Oct 8, 2009, at 2:27 PM, Jan Just Keijser wrote:

> Hi Eduard,
>
> Drenth, Eduard wrote:
>> Thanks for your reply, I'll try to clarify my confusing prosa :-), 
>> see
>> below, and.... I mixed up my 2b and 3b, sorry. So the "2b
>> options/solutions" is actually about grid jobs started from a moteur
>> workflow.
>>
>> Personally I favor the scenarios where an agent wraps the actual 
>> moteur
>> instance or grid-job, which ever is applicable.
>>
>> One thing in particular I would like to know.
>>
>> When wrapping a grid-job in an agent (so an agent is started on the
>> workernode as a job, the agent launches the grid-job shell), is it
>> problematic to keep the agent alive for some time (until 
>> troubleshooting
>> by the agents finishes) after the grid-job fails?
>>
>>
> if you submit an agent-job to the grid, which in turn starts 
> something else then the grid "sees" only the agent-job. The agent-
> job will run for as long as your job-slot is, even if the actual 
> 'grib-job shell' as you call it has terminated. Be aware that the VO 
> is also "charged" for however long the agent-job will run , even if 
> the agent is doing nothing at all
>
> So it is not problematic to keep the agent alive after the payload 
> job finishes , except for the fact that you're consuming resources 
> (and eating up allocated fair share) which might be used more 
> efficiently.
>
>
> cheers,
>
> JJK  / Jan Just Keijser
> Nikhef
> Amsterdam
>


